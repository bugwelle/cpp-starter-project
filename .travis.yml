# Use minimal image as base to avoid overriding environment variables.
language: minimal
os: linux
dist: focal

stages:
- check
- test
- coverage
- name: deploy
  if: branch = master

matrix:
  include:

  #----------------------------------------------------------------------------
  # Check Stage
  # We run some linters and code formatters to check our code base. If this
  # already fails, we can skip others stages.
  #----------------------------------------------------------------------------

  # Travis CI has integrated ShellCheck by default. This is faster than using
  # cmake with shellcheck target because we don't need to install conan
  # dependencies.
  - name: "shellcheck linting"
    stage: check
    language: shell
    before_script:
      - shellcheck --version
    script:
      - ./tools/run_shellcheck.sh

  - name: "cmake-format check"
    stage: check
    language: python
    python: ['3.8']
    addons: { apt: { packages: ['python3-setuptools', 'python3-pip'] } }
    install:
      - pip install cmake_format
    before_script:
      - cmake-format --version
    script:
      - ./tools/run_cmake_format.sh
      - git diff --diff-filter=M --color | cat
      - git diff --diff-filter=M --quiet || (echo "Found unformatted CMakeLists.txt! Use cmake-format!"; exit 1)

  - name: "clang-tidy linting"
    stage: check
    env: CC=clang-12 CXX=clang++-12
    before_install:
      - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        # install modern gcc for std lib
      - sudo apt install clang-12 clang-tidy-12 g++-11 python3-setuptools python3-pip
    install:
      - pip3 install conan cmake
    before_script:
      - cd tools
    script:
      - ./build_run_clang_tidy.sh
      - git diff --diff-filter=M --color | cat
      - git diff --diff-filter=M --quiet || (echo "Found fixable errors! Use clang-tidy!"; exit 1)

  - name: "cppcheck linting"
    stage: check
    addons: { apt: { packages: ['cppcheck'] } }
    before_script:
      - cppcheck --version
    script:
      - ./tools/run_cppcheck.sh

  #----------------------------------------------------------------------------
  # Test Stage
  # Build and test our application on macOS and linux. All stages have the
  # script job in common (see end of this yml).
  #----------------------------------------------------------------------------

  # macOS build and test using system's clang. Dependencies are installed
  # using the Homebrew addon, though "brew install ABC" works as well.
  - name: "macOS clang"
    stage: test
    os: osx
    osx_image: xcode10
    compiler: clang
    install:
      - pip3 install cmake conan

  # Linux build and test using gcc-11. Dependencies are installed using the APT
  # addon, though "apt-get install ABC" works as well.
  # We need some python packages to install conan.
  - name: "linux build with GCC 11"
    stage: test
    env: CC=gcc-11 CXX=g++-11
    before_install:
      - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
      - sudo apt install gcc-11 g++-11 python3-setuptools python3-pip
    # See https://docs.conan.io/en/latest/integrations/ci/travisci.html
    install:
      - pip3 install conan cmake
      - conan user

  - name: "linux build with GCC 10"
    stage: test
    env: CC=gcc-10 CXX=g++-10
    before_install:
      - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
      - sudo apt install gcc-10 g++-10 python3-setuptools python3-pip
    install:
      - pip3 install conan cmake
      - conan user

  # Windows build and test. Windows support is currently in beta on Travis.
  # CMake and MinGw are installed by default.
  #
  # TODO: Chocolatey has too many time outs.
  #
  # - name: "Windows GCC builds"
  #   stage: test
  #   os: windows
  #   language: cpp
  #   compiler: gcc
  #   # env:
  #   #  - CMAKE_GENERATOR_OVERRIDE="Visual Studio 15 2017 Win64"
  #   install:
  #     - choco install python3
  #     - export PATH="/c/Python310:/c/Python310/Scripts:$PATH"
  #     - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
  #     - python --version
  #     - ls /c
  #     - python3 get-pip.py --user
  #     - python3 -m pip install conan
  #     - conan user
  #   script:
  #     - conan install ..
  #     - echo "CC=$CC"
  #     - echo "CXX=$CXX"
  #     - cmake -DCMAKE_BUILD_TYPE=Debug -G "MinGW Makefiles" -DCMAKE_SH="CMAKE_SH-NOTFOUND" .. &&
  #       cmake --build . -j 2                                                                  &&
  #       ctest -j2

  #----------------------------------------------------------------------------
  # Coverage Stage
  # Builds targets with "--coverage" and uses lcov to generate a coverage
  # report.
  #----------------------------------------------------------------------------

  # Linux coverage build and test execution using gcc-11. Dependencies are
  # installed using the APT addon, though "apt-get install ABC" works as well.
  # We need some python packages to install conan.
  - name: "linux coverage run"
    stage: coverage
    env: CC=gcc-11 CXX=g++-11
    before_install:
      - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
      - sudo apt install gcc-11 g++-11 python3-setuptools python3-pip
    # See https://docs.conan.io/en/latest/integrations/travisci.html
    install:
      # I had to many issues with older versions of lcov; use latest
      - git clone https://github.com/linux-test-project/lcov.git &&
        ( cd lcov && sudo make install )
      - sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-11 10
      - pip3 install conan cmake
      - conan user
    script:
      - cmake .. -DCMAKE_BUILD_TYPE=Debug -DENABLE_COTIRE=OFF -DENABLE_COVERAGE=ON &&
        make -j$(nproc)                                                            &&
        make coverage
      - bash <(curl -s https://codecov.io/bash) -f coverage-filtered.info || echo "Codecov did not collect coverage reports"

before_script:
  - mkdir build && cd $_

script:
  - cmake -DCMAKE_BUILD_TYPE=Debug ..            &&
    cmake --build . -j $(nproc) --config "Debug" &&
    ctest -j2
